syntax = "proto3";

package im.ghasedak.pubsub;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

import "misc.proto";


// The service that an application uses to manipulate topics, and to send
// messages to a topic.
service Publisher {
  // Creates the given topic with the given name. See the
  // <a href="https://pubsub.ghasedak.im/pubsub/docs/admin#resource_names">
  // resource name rules</a>.
  rpc CreateTopic(Topic) returns (Topic) {
    option (google.api.http) = {
      put: "/v1/{name=projects/*/topics/*}"
      body: "*"
    };
  }

  // Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
  // does not exist.
  rpc Publish(PublishRequest) returns (PublishResponse) {
    option (google.api.http) = {
      post: "/v1/{topic=projects/*/topics/*}:publish"
      body: "*"
    };
  }

}


// The service that an application uses to manipulate subscriptions and to
// consume messages from a subscription via the `Pull` method or by
// establishing a bi-directional stream using the `StreamingPull` method.
service Subscriber{
  // Creates a subscription to a given topic. See the
  // <a href="https://pubsub.ghasedak.im/pubsub/docs/admin#resource_names">
  // resource name rules</a>.
  // If the subscription already exists, returns `ALREADY_EXISTS`.
  // If the corresponding topic doesn't exist, returns `NOT_FOUND`.
  //
  // If the name is not provided in the request, the server will assign a random
  // name for this subscription on the same project as the topic, conforming
  // to the
  // [resource name format](https://pubsub.ghasedak.im/pubsub/docs/admin#resource_names).
  // The generated name is populated in the returned Subscription object.
  // Note that for REST API requests, you must specify a name in the request.
  rpc CreateSubscription(Subscription) returns (Subscription) {
    option (google.api.http) = {
      put: "/v1/{name=projects/*/subscriptions/*}"
      body: "*"
    };
  }

    // Acknowledges the messages associated with the `ack_ids` in the
  // `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
  // from the subscription.
  //
  // Acknowledging a message whose ack deadline has expired may succeed,
  // but such a message may be redelivered later. Acknowledging a message more
  // than once will not result in an error.
  rpc Acknowledge(AcknowledgeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/{subscription=projects/*/subscriptions/*}:acknowledge"
      body: "*"
    };
  }

  // Pulls messages from the server. The server may return `UNAVAILABLE` if
  // there are too many concurrent pull requests pending for the given
  // subscription.
  rpc Pull(PullRequest) returns (PullResponse) {
    option (google.api.http) = {
      post: "/v1/{subscription=projects/*/subscriptions/*}:pull"
      body: "*"
    };
  }

  // Establishes a stream with the server, which sends messages down to the
  // client. The client streams acknowledgements and ack deadline modifications
  // back to the server. The server will close the stream and return the status
  // on any error. The server may close the stream with status `UNAVAILABLE` to
  // reassign server-side resources, in which case, the client should
  // re-establish the stream. Flow control can be achieved by configuring the
  // underlying RPC channel.
  rpc StreamingPull(stream StreamingPullRequest) returns (stream StreamingPullResponse) {
  }

    // Seeks an existing subscription to a point in time or to a given snapshot,
  // whichever is provided in the request. Snapshots are used in
  // <a href="https://pubsub.ghasedak.im/pubsub/docs/replay-overview">Seek</a>
  // operations, which allow
  // you to manage message acknowledgments in bulk. That is, you can set the
  // acknowledgment state of messages in an existing subscription to the state
  // captured by a snapshot. Note that both the subscription and the snapshot
  // must be on the same topic.<br><br>
  // <b>BETA:</b> This feature is part of a beta release. This API might be
  // changed in backward-incompatible ways and is not recommended for production
  // use. It is not subject to any SLA or deprecation policy.
  rpc Seek(SeekRequest) returns (SeekResponse) {
    option (google.api.http) = {
      post: "/v1/{subscription=projects/*/subscriptions/*}:seek"
      body: "*"
    };
  }

}

// A topic resource.
message Topic {
  // The name of the topic. It must have the format
  // `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
  // and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
  // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
  // signs (`%`). It must be between 3 and 255 characters in length, and it
  // must not start with `"goog"`.
  string name = 1;

  // The token of topic.
  string token = 2;

  // See <a href="https://pubsub.ghasedak.im/pubsub/docs/labels"> Creating and
  // managing labels</a>.
  map<string, string> labels = 3;

  // Policy constraining how messages published to the topic may be stored. It
  // is determined when the topic is created based on the policy configured at
  // the project level. It must not be set by the caller in the request to
  // CreateTopic or to UpdateTopic. This field will be populated in the
  // responses for GetTopic, CreateTopic, and UpdateTopic: if not present in the
  // response, then no constraints are in effect.
  MessageStoragePolicy message_storage_policy = 4;
}

message MessageId {
    int64 seq = 1;
    google.protobuf.Timestamp time = 2;
}

// A message that is published by publishers and consumed by subscribers. The
// message must contain either a non-empty data field or at least one attribute.
// Note that client libraries represent this object differently
// depending on the language. See the corresponding
// <a href="https://pubsub.ghasedak.im/pubsub/docs/reference/libraries">client
// library documentation</a> for more information. See
// <a href="https://pubsub.ghasedak.im/pubsub/quotas">Quotas and limits</a>
// for more information about message limits.
message PubsubMessage {
  // The message data field. If this field is empty, the message must contain
  // at least one attribute.
  bytes data = 1;

  // Optional attributes for this message.
  map<string, string> attributes = 2;

  // ID of this message, assigned by the server when the message is published.
  // Guaranteed to be unique within the topic. This value may be read by a
  // subscriber that receives a `PubsubMessage` via a `Pull` call or a push
  // delivery. It must not be populated by the publisher in a `Publish` call.
  MessageId message_id = 3;

  // The time at which the message was published, populated by the server when
  // it receives the `Publish` call. It must not be populated by the
  // publisher in a `Publish` call.
  google.protobuf.Timestamp publish_time = 4;
}

// Request for the Publish method.
message PublishRequest {
  // The messages in the request will be published on this topic.
  // Format is `projects/{project}/topics/{topic}`.
  string topic = 1;

  // The messages to publish.
  repeated PubsubMessage messages = 2;
}

// Response for the `Publish` method.
message PublishResponse {
  // The server-assigned ID of each published message, in the same order as
  // the messages in the request. IDs are guaranteed to be unique within
  // the topic.
  repeated MessageId message_ids = 1;
}



// A subscription resource.
message Subscription {
  // The name of the subscription. It must have the format
  // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
  // start with a letter, and contain only letters (`[A-Za-z]`), numbers
  // (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
  // plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
  // in length, and it must not start with `"goog"`.
  string name = 1;

  // The name of the topic from which this subscription is receiving messages.
  // Format is `projects/{project}/topics/{topic}`.
  // The value of this field will be `_deleted-topic_` if the topic has been
  // deleted.
  string topic = 2;

  // The token of topic.
  string token = 3;

  // If push delivery is used with this subscription, this field is
  // used to configure it. An empty `pushConfig` signifies that the subscriber
  // will pull and ack messages using API methods.
  PushConfig push_config = 4;


  // See <a href="https://pubsub.ghasedak.im/pubsub/docs/labels"> Creating and
  // managing labels</a>.
  map<string, string> labels = 5;

}



// Configuration for a push delivery endpoint.
message PushConfig {
  // A URL locating the endpoint to which messages should be pushed.
  // For example, a Webhook endpoint might use "https://example.com/push".
  string push_endpoint = 1;

  // Endpoint configuration attributes.
  //
  // Every endpoint has a set of API supported attributes that can be used to
  // control different aspects of the message delivery.
  //
  // The currently supported attribute is `x-goog-version`, which you can
  // use to change the format of the pushed message. This attribute
  // indicates the version of the data expected by the endpoint. This
  // controls the shape of the pushed message (i.e., its fields and metadata).
  // The endpoint version is based on the version of the Pub/Sub API.
  //
  // If not present during the `CreateSubscription` call, it will default to
  // the version of the API used to make such call. If not present during a
  // `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
  // calls will always return a valid version, even if the subscription was
  // created without this attribute.
  //
  // The possible values for this attribute are:
  //
  // * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
  // * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
  map<string, string> attributes = 2;
}


// A message and its corresponding acknowledgment ID.
message ReceivedMessage {
  // This ID can be used to acknowledge the received message.
  MessageId ack_id = 1;

  // The message.
  PubsubMessage message = 2;
}


// Request for the `Pull` method.
message PullRequest {
  // The subscription from which messages should be pulled.
  // Format is `projects/{project}/subscriptions/{sub}`.
  string subscription = 1;

    // The token of topic.
  string token = 2;

  // If this field set to true, the system will respond immediately even if
  // it there are no messages available to return in the `Pull` response.
  // Otherwise, the system may wait (for a bounded amount of time) until at
  // least one message is available, rather than returning no messages.
  bool return_immediately = 3;

  // The maximum number of messages returned for this request. The Pub/Sub
  // system may return fewer than the number specified.
  int32 max_messages = 4;
}

// Response for the `Pull` method.
message PullResponse {
  // Received Pub/Sub messages. The list will be empty if there are no more
  // messages available in the backlog. For JSON, the response can be entirely
  // empty. The Pub/Sub system may return fewer than the `maxMessages` requested
  // even if there are more messages available in the backlog.
  repeated ReceivedMessage received_messages = 1;
}


// Request for the Acknowledge method.
message AcknowledgeRequest {
  // The subscription whose message is being acknowledged.
  // Format is `projects/{project}/subscriptions/{sub}`.
  string subscription = 1;

  // The acknowledgment ID for the messages being acknowledged that was returned
  // by the Pub/Sub system in the `Pull` response. Must not be empty.
  repeated string ack_ids = 2;
}

// Request for the `StreamingPull` streaming RPC method. This request is used to
// establish the initial stream as well as to stream acknowledgements and ack
// deadline modifications from the client to the server.
message StreamingPullRequest {
  // The subscription for which to initialize the new stream. This must be
  // provided in the first request on the stream, and must not be set in
  // subsequent requests from client to server.
  // Format is `projects/{project}/subscriptions/{sub}`.
  string subscription = 1;

  // The token of topic.
  string token = 2;

  // List of acknowledgement IDs for acknowledging previously received messages
  // (received on this stream or a different stream). If an ack ID has expired,
  // the corresponding message may be redelivered later. Acknowledging a message
  // more than once will not result in an error. If the acknowledgement ID is
  // malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
  repeated MessageId ack_ids = 3;
}

// Response for the `StreamingPull` method. This response is used to stream
// messages from the server to the client.
message StreamingPullResponse {
  // Received Pub/Sub messages. This will not be empty.
  repeated ReceivedMessage received_messages = 1;
}

// Request for the `Seek` method. <br><br>
// <b>BETA:</b> This feature is part of a beta release. This API might be
// changed in backward-incompatible ways and is not recommended for production
// use. It is not subject to any SLA or deprecation policy.
message SeekRequest {
  // The subscription to affect.
  string subscription = 1;

  // The token of topic.
  string token = 2;

  MessageId message_id = 3;
}

// Response for the `Seek` method (this response is empty).
message SeekResponse {

}