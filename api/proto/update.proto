syntax = "proto3";

package im.ghasedak.pubsub;

import "misc.proto";

service UpdateService {
    rpc GetDifference (RequestGetDifference) returns (ResponseGetDifference);
    rpc Acknowledge(RequestAcknowledge) returns (ResponseVoid);
    rpc StreamingGetDifference (stream StreamingRequestGetDifference) returns (stream StreamingResponseGetDifference);
    rpc Seek (RequestSeek) returns (ResponseVoid);
}

message SeqState {
    int32 seq = 1;
    bytes state = 2;
}

message UpdateContainer {
    oneof update {
        UpdatePong pong = 1;
    }
}

message UpdatePong {
    int32 i = 1;
}


message RequestGetDifference {
    // If this is specified as true the system will respond immediately even if
    // it is not able to return a message in the Pull response. Otherwise the
    // system is allowed to wait until at least one message is available rather
    // than returning no messages. The client may cancel the request if it does
    // not wish to wait any longer for the response.
    bool return_immediately = 1;

    // The maximum number of updates returned for this request.
    // May return fewer than the number specified.
    int32 max_messages = 2;
}

message ReceivedUpdate {
    SeqState message_id = 1;
    UpdateContainer update_container = 2;
}

message ResponseGetDifference {
    // Received Pub/Sub updates. The Pub/Sub system will return zero updates if
    // there are no more available in the backlog. The Pub/Sub system may return
    // fewer than the maxMessages requested even if there are more updates
    // available in the backlog.
    repeated ReceivedUpdate received_updates = 1;
}

// Request for the Acknowledge method.
message RequestAcknowledge {
    // The acknowledgment ID for the messages being acknowledged that was returned
    // by the Pub/Sub system in the `RequestGetDifference` response. Must not be empty.
    SeqState ack_id = 1;
}

// Establishes a stream with the server, which sends update down to the
// client. The client streams acknowledgements and ack message Id
// back to the server. The server will close the stream and return the status
// on any error. The server may close the stream with status `UNAVAILABLE` to
// reassign server-side resources, in which case, the client should
// re-establish the stream. Flow control can be achieved by configuring the
// underlying RPC channel.
message StreamingRequestGetDifference {
    // List of acknowledgement IDs for acknowledging previously received updates
    // (received on this stream or a different stream). If an ack ID has expired,
    // the corresponding message may be redelivered later. Acknowledging a message
    // more than once will not result in an error. If the acknowledgement ID is
    // malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
    SeqState ack_id = 1;
}

message StreamingResponseGetDifference {
    // Received updates. This will not be empty.
    repeated ReceivedUpdate received_updates = 1;
}

message RequestSeek {
    SeqState message_id = 1;
}
